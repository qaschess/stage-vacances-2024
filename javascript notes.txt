Variable = 3 elements (valeur, nom , type)
let/const pour declarer une varibke
	let decalre une variable qui peut changer dans le code
	const decalre une varaible constante
(var aussi mais considere obsolete)
Pour v√©rifier le contenu d‚Äôune variable, il est possible d‚Äôutiliser l‚Äôinstruction console.log(), avec entre les parenth√®ses, le nom de la variable.

string
number
boolean

pour modifier leur valeurs on utilise des op√©rateurs
ex : let placesDejaVendues = 150
     placesDejaVendues = placesDejaVendues + 10



On peut √©crire aussi 
	ley placesDejaVendues = 150
	placesDejaVendues += 10


// sert pour les commentaires

pour qu'il y'ai une addition entre deux variabes avec des nombres , il faut que variable=Number(valeur de la variable)



Pour declarer un objet on utilise des accolades
ex :
let monPersonnage = {
nom:
prenom:
...
}



Pour d√©clarer un objet en JavaScript, vous devez utiliser les accolades  "{ }"  . Les propri√©t√©s d‚Äôun objet ont un nom et une valeur qui sont assign√©es avec deux points ":" . Les propri√©t√©s sont s√©par√©es entre elles par des virgules "," .


Pour ajouter une propri√©t√©, vous devez √©crire le nom de votre objet, s√©par√© par un point  .  avec le nom de votre nouvelle propri√©t√© :




les tableaux c,est entre crochets
methodes:
pour ajouter un element c'est .push (tujours en derniers place)
.pop supprime le dernier element du tableau
.shift supprime le premier element


Pour acc√©der au contenu d'une case, on a par ex : let nomtableau = ellemet du tableau[position ]

.lenght  c pr le nb d'element du tableau
 

copie par valeur c'est quand le contenu est de type est simple (boolean number ou string)
par referencce c'est quand  le contenu est de type "complexe"

Dans le cas d‚Äôune copie par valeur, si vous modifiez la valeur d‚Äôune des deux variables, la valeur de l‚Äôautre ne change pas. Dans le cas d‚Äôune copie par r√©f√©rence, si vous changez la valeur de la premi√®re variable, la valeur de la seconde est affect√©e aussi.


Pour d√©clarer un nouveau tableau et recopier toutes les valeurs une par une.
un spread operateur est un op√©rateur qui nous permet de faire automatiquement la copie, et cet op√©rateur s‚Äô√©crit" ‚Ä¶."




Les blocs de code sont des regroupements de lignes de code. Ils permettent d‚Äôorganiser votre code et de clarifier √† quoi sert un groupe de lignes de code. En JavaScript, ils sont d√©limit√©s par des accolades  { }  .


op√©rateurs de comparaison
< inf√©rieur √†

<= inf√©rieur ou √©gal √†

=== √©gal √†

>= sup√©rieur ou √©gal √†

> sup√©rieur √†

!== diff√©rent de


boucle for et while ()


fonction exemple :
function retournerMessageScore(score, nombreQuestions) {
    let message = 'Votre score est de ' + score + ' sur ' + nombreQuestions
    return message
}



Utilisez defer pour diff√©rer l‚Äôex√©cution du script

Utilisez diff√©rentes syntaxes pour r√©cup√©rer un √©l√©ment
JavaScript propose tout un √©ventail de m√©thodes pour r√©cup√©rer les √©l√©ments du DOM. Dans ce chapitre, nous en aborderons trois :

getElementById ;

querySelector ;

querySelectorAll.


CreateElement est une m√©thode fournie par JavaScript, accessible depuis document. Elle permet de cr√©er n‚Äôimporte quelle balise :

L‚Äôinterpolation consiste √† entourer la cha√Æne de caract√®res avec des backticks : `  . Ce caract√®re correspond √† l‚Äôaccent du ‚Äú√®‚Äù, mais sans le e en dessous üôÇ. Ainsi, quand nous voulons ins√©rer une variable, il suffit de l‚Äôentourer avec${}.

Ins√©rez votre HTML gr√¢ce √† innerHTML

√âcoutez un √©v√©nement avec addEventListener
AddEventListener est une m√©thode fournie par JavaScript, qui peut √™tre appel√©e directement depuis les √©l√©ments HTML. Cette m√©thode prend deux param√®tres : 

le nom de l‚Äô√©v√©nement, comme click, par exemple ;

une fonction. 


Un formulaire est compos√© d‚Äôune balise form qui englobe une s√©rie d‚Äôautres balises qui composent le formulaire : labels, input, texterea et select.



Les balises labels
Les balises labels servent √† indiquer un texte, li√© au champ que l‚Äôutilisateur va devoir remplir. 

Les balises input
Les balises input (‚Äúentr√©e‚Äù, en fran√ßais) forment le c≈ìur des formulaires. Elles permettent √† l‚Äôutilisateur de saisir des donn√©es. D‚Äôailleurs, nous en avons d√©j√† utilis√© une dans notre projet. Eh oui, rappelez-vous, c‚Äôest gr√¢ce √† cela que le joueur peut maintenant saisir le mot qu‚Äôil doit recopier.

Les balises textarea
La balise input de type texte ne comporte qu‚Äôune seule ligne. Elle n‚Äôest donc pas indiqu√©e pour saisir une grande portion de texte, comme un commentaire. Dans ce cas, la meilleure solution est d‚Äôutiliser une balise textarea, dans laquelle il sera plus pratique d‚Äô√©crire des paragraphes :

Les balises select
La balise select permet de cr√©er une liste d√©roulante o√π l'utilisateur peut s√©lectionner une option √† partir d'une liste pr√©d√©finie d'options. La liste d'options est d√©finie √† l'aide de balises option imbriqu√©es √† l'int√©rieur de la balise select.

R√©cup√©rez la valeur d‚Äôun champ
Maintenant que nous savons √† quoi ressemble un formulaire, il est temps de r√©cup√©rer, dans notre code JavaScript, le contenu de chacun de ces champs. Pour y parvenir, nous utiliserons diff√©rentes m√©thodes, en fonction du type de champ.

R√©cup√©rez les valeurs avec la propri√©t√© ‚Äúvalue‚Äù
La plupart du temps, il est assez simple de r√©cup√©rer la valeur d‚Äôun champ. Il suffit d‚Äôutiliser la propri√©t√© value.

Voici un exemple avec un champ appel√© name :

<input type="text" id="nom" name="nom">
Pour r√©cup√©rer sa valeur en JavaScript, nous √©crirons :

let baliseNom = document.getElementById("nom")
let nom = baliseNom.value
console.log(nom); // affiche ce qui est contenu dans la balise name
Cette m√©thode fonctionne pour la plupart des balises :

input de type texte, num√©rique, e-mail, mot de passe ; 

textarea ;

select. 


R√©cup√©rez les valeurs des cases √† cocher
Une case √† cocher est un cas particulier, car l‚Äôutilisateur ne rentre pas une valeur. Il d√©cide de cocher, ou non, la case. La valeur de ce champ est donc n√©cessairement true si la case est coch√©e, ou false si elle ne l‚Äôest pas.

Pour v√©rifier cela, vous devez utiliser la propri√©t√© checked.


pour emvpevher submit de recharger la page on utiise preventDefault

form.addEventListener("submit", (event) => {
    // On emp√™che le comportement par d√©faut
    event.preventDefault();
    console.log("Il n‚Äôy a pas eu de rechargement de page");

    // On r√©cup√®re les deux champs et on affiche leur valeur
    const nom = document.getElementById("nom").value;
    const email = document.getElementById("email").value;
    console.log(nom);
    console.log(email);
});


Dans ce code, j‚Äôai  :

√©cout√© l'√©v√©nement submit sur le formulaire ;

fait un preventDefault pour √©viter un rechargement de la page ;

v√©rifi√© la valeur du champ ;

affich√© un message dans la console pour v√©rifier.


En utilisant la m√©thode trim(), vous pouvez ainsi nettoyer le champ et supprimer automatiquement les espaces et autres tabulations autour de la cha√Æne √† tester !





Pour v√©rifier la valeur d‚Äôun champ √† la saisie, le principe est le m√™me. Nous allons √©couter un √©v√©nement. Deux types d'√©v√©nements sont possibles dans ce cas :

l‚Äô√©v√©nement input : il se d√©clenche √† chaque fois que l‚Äôutilisateur tape une lettre dans le champ ;

l‚Äô√©v√©nement change : il se d√©clenche quand l‚Äôutilisateur a fini de taper, et s√©lectionne un autre √©l√©ment de la page.  



Le principe des expressions r√©guli√®res est de d√©crire, dans un format pr√©cis, l‚Äôensemble des cha√Ænes de caract√®res possibles, puis de tester si la cha√Æne de caract√®res correspond √† ce format. Les expressions r√©guli√®res sont √©galement appel√©es RegEx ou RegExp, pour ‚ÄúRegular Expression‚Äù, en anglais.




let chaine = "cachalot"; // Testez avec des chiffres pour voir la diff√©rence
let regex = new RegExp("^[a-z]+$");
let resultat = regex.test(chaine);
console.log(resultat); // Affiche true.


Voici quelques exemples d‚Äôexpressions r√©guli√®res simples :

[a-z]  : une lettre entre a et z ;

[a-zA-Z]  : une lettre entre a et z ou A et Z ; 

[a|b]  : une lettre : a ou b, √† l‚Äôexclusion de toutes les autres ;

\d  : n‚Äôimporte quel chiffre ;

\w  : n‚Äôimporte quelle lettre ;

\d{3}  : au moins trois chiffres.






[a-z0-9._-]+
Cela signifie que nous voulons au moins un caract√®re qui correspond √† ce qui est entre crochets. Donc un caract√®re qui soit :

une lettre entre a et z ;

un chiffre entre 0 et 9 ;

le caract√®re  .  ;

le caract√®re  _  ;

le caract√®re  -  .

√âtape 2 : v√©rifiez l‚Äôarobase
Ensuite il nous faut un @. Nous √©crirons donc :

[a-z0-9._-]+@
√âtape 3 : v√©rifiez le fournisseur
Puis nous avons √† nouveau un mot (le fournisseur). Nous √©crirons donc :

[a-z0-9._-]+@[a-z0-9._-]+
√âtape 4 : v√©rifiez le point
Le  .  √©tant utilis√© comme symbole dans les expressions r√©guli√®res, nous devrons l'√©chapper, c'est-√†-dire expliquer √† l‚Äôinterpr√©teur que ce  .  doit √™tre consid√©r√© comme le caract√®re  .  , et pas interpr√©t√©.

[a-z0-9._-]+@[a-z0-9._-]+\.
√âtape 5 : v√©rifiez l'extension
Et finalement, nous voulons ajouter l'extension :

[a-z0-9._-]+@[a-z0-9._-]+\.[a-z0-9._-]+
L‚Äôexpression dans son ensemble signifie donc : un caract√®re ou plus, suivi d‚Äôun @, suivi d‚Äôun caract√®re ou plus, suivi d‚Äôun point, suivi d‚Äôun caract√®re ou plus : nous avons nos 5 √©tapes !




Le bloc try / catch est compos√© de deux parties : 

l‚Äôinstruction try (essayer, en fran√ßais) va essayer d‚Äôex√©cuter du code ; 

l‚Äôinstruction catch (attraper, en fran√ßais) va attraper les √©ventuelles erreurs pour les g√©rer. 


throw (lancer, en anglais). Cette derni√®re nous permet de lancer nos propres exceptions, qui pourront alors √™tre attrap√©es par un catch.

font awesome = librairie caracteres
/*   */ c pr commenter

